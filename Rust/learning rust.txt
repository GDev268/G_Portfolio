======================================================================================================================

01 - Hello World!

    //One line comment

    /*Multiple line 
    comment */

    - Normal print
    println!("Hello World");

    -Formatted print (PAIN)
    println("Hello {}", you var);

    -Formatted print but better (ACTUALLY NOT PAIN :) )
    println("Hello {you var}");
    

=====================================================================================================================

02 - Variables

    // Integer ("i32")
    let _integer_number:i32 = 3242085;
    
    // Float ("f64")
    let _float_number:f64 = 985925.5252;

    // Char ("char")
    let _char_letter:char = 'e';

    //Bool
    let _bool_value:bool = false;

    //Tuple ("This looks like a true trash")
    let _tuple = (0,"hello",true,'e');

    //Array ("Have a fixed index (FUCKING HELL)")
    let _array:[i32;5] = [1,2,3,4,5];

    println!("number:{}\nfloat:{}\nchar:{}\nbool:{}", _integer_number,_float_number,_char_letter,_bool_value);
    println!("Tuple:{:?}\nTuple Element:{}\nArray:{:?}\nTuple Element:{}",_tuple,_tuple.1,_array,_array[1]);


======================================================================================================================

03 - If statements

    let mut x:i32 = 32;


    if x < 30 {
        println!("The number: {x} is less than 30");
    }
    else if x > 50 {
        println!("The number: {x} is higher than 50");
    }
    else{
        println!("The number: {x} is a number");
    }

    let mut y = if x < 30 {
        1
    }
    else if x > 100 {
        6
    }
    else{
        4
    };

    println!("The value of y is: {y}");  

======================================================================================================================

04 - Loops

    //Infinte loop
    loop {
        println!("THE INFINTE LOOOP!")
    }

    let mut num:i32 = 0;
    let mut done:bool = false;

    //While loop
    while !done{
        num += 1;

        println!("{num}");

        if num == 1000 {
            done = true;
        }
    }

    println!("DONE! \n\n");

    //For loop from 0 to 100
    for i in 0..100 {
        println!("{i}");
    }

    //For loop that shows the index and result
    for(index,number) in (5..10).enumerate(){
        println!("Index: {index} | Number: {number}");
    }

    println!("DONE! \n\n");

    done = false;
    num = 0;
    //Break the loop
    while !done{
        num += 1;

        println!("{num}");

        if num == 500 {
            break;
        }
    }

    //Loop Inheritance
    for i in 0..10{
        for j in 0..100{
            println!("{i}-{j}");
        }
    }

======================================================================================================================

05 - Ownership

    fn main() {
        //Ownership

        let mut num1:Vec<i64> = vec![52,25,64,32,64,3,64]; //Normal vector
        let mut num2:Vec<i64> = num1; //Borrowed vector from vector 'num1

        //Copying
        let num3:i32 = 55694; // Normal variable
        let mut num4:i32 = num3; //Copied variable from the variable 'num3'

        num4 = doubleAndIncrease(num4, 10);
        println!("{num4}");
    }



    fn doubleAndIncrease(mut num:i32,increment:i32) -> i32 {

        num += increment;
        return num * 2;
    }

======================================================================================================================

    06 - Referencing and Borrowing

